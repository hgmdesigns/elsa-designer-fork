import { LocationSegments, RouterHistory } from "@stencil/router";
import { OrderBy, PagedList, WorkflowBlueprintSummary, WorkflowInstanceSummary, WorkflowStatus } from "../../../../models";
import { DropdownButtonItem } from "../../../controls/elsa-dropdown-button/models";
export declare class ElsaWorkflowInstanceListScreen {
  history?: RouterHistory;
  serverUrl: string;
  workflowBlueprints: Array<WorkflowBlueprintSummary>;
  workflowInstances: PagedList<WorkflowInstanceSummary>;
  selectedWorkflowId?: string;
  selectedWorkflowStatus?: WorkflowStatus;
  selectedOrderBy?: OrderBy;
  selectedWorkflowInstanceIds: Array<string>;
  selectAllChecked: boolean;
  page: number;
  pageSize: number;
  searchTerm?: string;
  confirmDialog: HTMLElsaConfirmDialogElement;
  componentWillLoad(): Promise<void>;
  applyQueryString(queryString?: string): void;
  loadWorkflowBlueprints(): Promise<void>;
  loadWorkflowInstances(): Promise<void>;
  createClient(): import("../../../../services/elsa-client").ElsaClient;
  getLatestWorkflowBlueprintVersions(): Array<WorkflowBlueprintSummary>;
  buildFilterUrl(workflowId?: string, workflowStatus?: WorkflowStatus, orderBy?: OrderBy): string;
  getStatusColor(status: WorkflowStatus): "rose" | "gray" | "blue" | "yellow" | "green" | "red";
  updateSelectAllChecked(): void;
  routeChanged(e: LocationSegments): Promise<void>;
  onSelectAllCheckChange(e: Event): void;
  onWorkflowInstanceCheckChange(e: Event, workflowInstance: WorkflowInstanceSummary): void;
  onDeleteClick(e: Event, workflowInstance: WorkflowInstanceSummary): Promise<void>;
  onBulkDelete(): Promise<void>;
  onBulkActionSelected(e: CustomEvent<DropdownButtonItem>): Promise<void>;
  onSearch(e: Event): Promise<void>;
  render(): any;
  renderBulkActions(): any;
  renderWorkflowFilter(): any;
  renderStatusFilter(): any;
  renderOrderByFilter(): any;
}
